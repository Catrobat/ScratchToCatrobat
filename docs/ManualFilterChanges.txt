Issues:
--------------------------------------------------------------------------------
1) Folgende Zeile in org.catrobat.catroid.content.Look.java ersetzen:
public class Look extends Image {

mit:
public class Look {

--------------------------------------------------------------------------------
3) Folgende Zeile in org.catrobat.catroid.content.bricks.UserBrick.java (direkt in die Klasse) ersetzen:
		try {
			for (Formula formula : formulas) {
				variables.add(new UserVariable(element.getText(), formula.interpretDouble(sprite)));
			}
		} catch (InterpretationException e) {
		}

mit:
	for (Formula formula : formulas) {
		variables.add(new UserVariable(element.getText()));
	}

--------------------------------------------------------------------------------
4) Folgende Zeilen in org.catrobat.catroid.io.BackwardCompatibleCatrobatLanguageXStream.java loeschen:

	public void updateCollisionReceiverBrickMessage(File file) {
		final String collisionTag = "CollisionScript";
		final String receivedTag = "receivedMessage";
		Document originalDocument = getDocument(file);

		if (originalDocument != null) {
			NodeList scripts = originalDocument.getElementsByTagName("script");
			for (int i = 0; i < scripts.getLength(); i++) {
				Node script = scripts.item(i);
				NamedNodeMap attr = script.getAttributes();
				if (attr.getLength() > 0) {
					for (int j = 0; j < attr.getLength(); j++) {
						if (attr.item(j).getNodeValue().equals(collisionTag)) {
							NodeList messages = script.getChildNodes();
							for (int k = 0; k < messages.getLength(); k++) {
								Node message = messages.item(k);
								if (message.getNodeName().equals(receivedTag)) {
									String broadcastMessage = message.getTextContent();
									String[] broadcastMessages = broadcastMessage.split("<(\\W)*-(\\W)*>");

									if (broadcastMessages[1].matches("(\\W)*ANYTHING(\\W)*")) {
										broadcastMessages[1] = PhysicsCollision.COLLISION_WITH_ANYTHING_IDENTIFIER;
									}
									broadcastMessage = broadcastMessages[0] + PhysicsCollision
											.COLLISION_MESSAGE_CONNECTOR + broadcastMessages[1];

									message.setTextContent(broadcastMessage);
								}
							}
						}
					}
				}
			}
		}
		saveDocument(originalDocument, file);
	}

5) UNBEDINGT FOLGENDES KONTROLLIEREN:
   CatroidFieldKeySorter.java oeffnen und alle equals()-Aufrufe in Methode sortProjectFields() anschauen.
   JEDER (!) Equals-Vergleich MUSS in Project.java als Field/Membervariable vorkommen!!
   zum Beispiel:
         wenn fieldKey.getFieldName().equals("xmlHeader") in sortProjectFields() vorkommt, heiÃt das
         dass es ein "xmlHeader"-Field/Membervariable in der Project-Klasse in Project.java geben MUSS!
		 Ist dies nicht der Fall mÃŒssen die Regeln in config.yml angepasst werden, sodass dieses Feld
		 nicht vom SourceCodeFilter weggefiltert wird.

6) UNBEDINGT FOLGENDES KONTROLLIEREN:
   CatroidFieldKeySorter.java oeffnen und alle equals()-Aufrufe in Methode sortSpriteFields() anschauen.
   JEDER (!) Equals-Vergleich MUSS in Sprite.java als Field/Membervariable vorkommen!!
   zum Beispiel:
         wenn fieldKey.getFieldName().equals("look") in sortProjectFields() vorkommt, heiÃt das
         dass es ein "xmlHeader"-Field/Membervariable in der Sprite-Klasse in Sprite.java geben MUSS!
		 Ist dies nicht der Fall mÃŒssen die Regeln in config.yml angepasst werden, sodass dieses Feld
		 nicht vom SourceCodeFilter weggefiltert wird.


Zusatzregeln
		 
-----------------------------------------------------------------------------------------------------------

In Look.java folgendes löschen:

boolean isBackgroundLook = getZIndex() == Constants.Z_INDEX_BACKGROUND;

-----------------------------------------------------------------------------------------------------------

In Project.java  

		Scene scene; 
		try {
			scene = new Scene(context, context.getString(R.string.default_scene_name, 1), this);
		} catch (Resources.NotFoundException e) {
			//Because in test project we can't find the string
			scene = new Scene(context, "Scene 1", this);
		}

ersetzen durch

Scene scene = new Scene(null, "Scene 1", this);

-----------------------------------------------------------------------------------------------------------

In Project.java folgendes loeschen:
		if (isCastProject) {
			setChromecastFields();
		}
// [...]
		removeInvalidVariablesAndLists(oldProject.dataContainer);

-----------------------------------------------------------------------------------------------------------

In Project.java folgendes ändern:
	public Project(Context context, String name, boolean landscapeMode, boolean isCastProject) {
zu:
	public Project(Scene.Context context, String name, boolean landscapeMode, boolean isCastProject) {

und:
	public Project(Context context, String name, boolean landscapeMode) {
zu:
	public Project(Scene.Context context, String name, boolean landscapeMode) {

und:
	public Project(Context context, String name) {
zu:
	public Project(Scene.Context context, String name) {

und:
	public Project(SupportProject oldProject, Context context) {
zu:
	public Project(SupportProject oldProject, Scene.Context context) {

-----------------------------------------------------------------------------------------------------------

In Scene.java folgendes löschen:
		import org.catrobat.catroid.content.bricks.BrickWithSpriteReference;

In Scene.java folgendes hinzufügen:

public class Context{};

-----------------------------------------------------------------------------------------------------------

In Scene.java folgendes einfügen:

background = new SingleSprite("Background");

und folgendes löschen:

background.look.setZIndex(0)

-----------------------------------------------------------------------------------------------------------

In UserScriptDefinitionBrick.java folgendes ersetzen:
	@Override
	public Script getScriptSafe() {
mit:
	public Script getScriptSafe() {

-----------------------------------------------------------------------------------------------------------
In SpriteDataBehaviour folgende Methode löschen:
	protected abstract boolean isClone(K key);

und:

	Map<Sprite, List<V>> cloneForScene(Scene scene, Map<K, List<V>> dataMap) {
		// [...]
	}

und:

	void removeCloneData() {
		// [...]
	}

-----------------------------------------------------------------------------------------------------------
In SpriteListBehaviour.java folgende Methode löschen:
	protected boolean isClone(Sprite key) {
		// [...]
	}

-----------------------------------------------------------------------------------------------------------
In SpriteVariableBehaviour.java folgende Methode löschen:
	@Override
	Map<Sprite, List<UserVariable>> cloneForScene(Scene scene, Map<Sprite, List<UserVariable>> originalData) {
		removeIllegalSpriteVariableEntries(null);
		return super.cloneForScene(scene, originalData);
	}

und:

	@Override
	protected boolean isClone(Sprite key) {
		return key.isClone();
	}

-----------------------------------------------------------------------------------------------------------
In UserBrickVariableBehaviour.java folgende Methode löschen:
	@Override
	protected boolean isClone(UserBrick key) {
		return false;
	}

